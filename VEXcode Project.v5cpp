{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT2, ratio18_1, false);\nmotor leftMotorB = motor(PORT5, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT8, ratio18_1, true);\nmotor rightMotorB = motor(PORT13, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  Drivetrain.driveFor(forward, 500, mm);\n  Drivetrain.turnFor(right, 90, degrees);\n  Drivetrain.driveFor(forward, 500, mm);\n  Drivetrain.turnFor(right, 90, degrees);\n  Drivetrain.driveFor(forward, 500, mm);\n  Drivetrain.turnFor(right, 90, degrees);\n  Drivetrain.driveFor(forward, 500, mm);\n}\n\n/*\nDrivetrain.drive(forward);\nDrivetrain.driveFor(forward, 200, mm);\nDrivetrain.turn(right);\nDrivetrain.turnFor(right, 90, degrees);\nDrivetrain.stop();\nDrivetrain.setDriveVelocity(50, percent);\nDrivetrain.setTurnVelocity(50, percent);\nDrivetrain.setStopping(brake);\nDrivetrain.setTimeout(1, seconds);\nBrain.Screen.print(\"VEXcode\");\nBrain.Screen.setCursor(1, 1);\nBrain.Screen.newLine();\nBrain.Screen.clearScreen();\nBrain.Screen.clearLine(1);\nBrain.Screen.drawPixel(0, 0);\nBrain.Screen.drawLine(0, 0, 10, 10);\nBrain.Screen.drawRectangle(0, 0, 10, 10);\nBrain.Screen.drawCircle(0, 0, 10);\nBrain.Screen.setFont(mono20);\nBrain.Screen.setPenWidth(10);\nBrain.Screen.setPenColor(red);\nBrain.Screen.setFillColor(red);\nprintf(\"VEXcode\");\nprintf(\"\\033[2J\\n\");\nController1.Screen.print(\"VEXcode\");\nController1.Screen.setCursor(1, 1);\nController1.Screen.newLine();\nController1.Screen.clearScreen();\nController1.Screen.clearLine(1);\nController1.rumble(\"----\");\ncompetition Competition = competition();\nCompetition.autonomous(callback);\nCompetition.drivercontrol(callback);\nBrain.Screen.pressed(callback);\nBrain.Screen.released(callback);\nBrain.Timer.event(callback, 1000);\nController1.ButtonUp.pressed(callback);\nController1.ButtonUp.released(callback);\nController1.Axis1.changed(callback);\nevent myEvent = event();\nmyEvent.broadcast();\nmyEvent.broadcastAndWait();\nmyEvent(callback);\nwait(1, seconds);\nif (condition) {\n  \n}\nif (condition) {\n  \n}\nelse {\n  \n}\nfor (int i = 0; i <= 10; i++) {\n  \n}\nwhile (!condition) {\n  \n}\nwhile (condition) {\n  \n}\nbreak;\nvexSystemExitRequest();\nBrain.Timer.clear();\nBrain.Timer.time(seconds)\nBrain.Screen.column()\nBrain.Screen.row()\nBrain.Screen.xPosition()\nBrain.Screen.yPosition()\nBrain.Screen.pressing()\nBrain.Battery.voltage(volt)\nBrain.Battery.current(amp)\nBrain.Battery.capacity()\nController1.ButtonUp.pressing()\nController1.Axis1.position()\nRemoteControlCodeEnabled = false;\nDrivetrain.isDone()\nDrivetrain.isMoving()\nDrivetrain.velocity(percent)\nDrivetrain.current(amp)\nDrivetrain.power()\nDrivetrain.torque(Nm)\nDrivetrain.efficiency()\nDrivetrain.temperature(percent)\nint myInteger = 1;\ndouble myDouble = 1.0;\nbool myBoolean = true;\nchar myString[] = \"VEXcode\";\nint myArray[3] = {1, 2, 3};\nint my2DArray[3][3] = {\n  { 0, 1, 2 },\n  { 3, 4, 5 },\n  { 6, 7, 8 }\n};\nvoid myFunction() {\n  \n}\nthread myThread = thread(myThreadCallback);*/","textLanguage":"cpp","rconfig":[{"port":[2,5,8,13,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}